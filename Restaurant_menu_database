USE restaurant_db;

-- Exploring and analyzing menu_items table
SELECT *
FROM menu_items;

SELECT 
	COUNT(menu_item_id)
FROM menu_items;

SELECT 
	item_name,
    MIN(price) AS mininum_price
FROM menu_items
GROUP BY item_name
ORDER BY 2 ASC
LIMIT 1;

SELECT 
	item_name,
    MAX(price) AS maximum_price
FROM menu_items
GROUP BY item_name
ORDER BY 2 DESC
LIMIT 1;

SELECT
	COUNT(menu_item_id)
FROM menu_items
WHERE category = 'Italian';

SELECT MIN(price)
FROM menu_items
WHERE category='Italian';      

SELECT MAX(price)
FROM menu_items
WHERE category='Italian';

SELECT 
	category,
    COUNT(menu_item_id) AS number_of_items,
    ROUND(AVG(price), 2) AS average_price
FROM menu_items
GROUP BY category;

-- Exploring and analyzing order_details table
SELECT *
FROM order_details;

SELECT 
	MIN(order_date), MAX(order_date)
FROM order_details;

SELECT 
	COUNT(DISTINCT order_id) AS total_orders,
	COUNT(item_id) AS total_items
FROM order_details;

SELECT order_id,
	COUNT(item_id)
FROM order_details
GROUP BY 1
ORDER BY 2 DESC;

WITH top_orders AS(
SELECT 
	order_id,
	COUNT(order_id)
FROM order_details
GROUP BY order_id
HAVING COUNT(item_id) > 12)
SELECT COUNT(*) FROM top_orders;

-- Combining both tables and conducting analyses
SELECT *
FROM order_details od LEFT JOIN menu_items mi
	ON od.item_id = mi.menu_item_id;
    
SELECT 
	item_name,
    category,
    COUNT(order_details_id) AS num_purchases
FROM order_details od LEFT JOIN menu_items mi
	ON od.item_id = mi.menu_item_id
GROUP BY item_name, category
ORDER BY 3 DESC;

SELECT
	order_id,
    SUM(price) AS total_spend
FROM order_details od LEFT JOIN menu_items mi
	ON od.item_id = mi.menu_item_id
GROUP BY order_id
ORDER BY total_spend DESC
LIMIT 5;

SELECT
	category,
    COUNT(item_id) AS num_items
FROM order_details od LEFT JOIN menu_items mi
	ON od.item_id = mi.menu_item_id
WHERE order_id IN (440, 2075, 1957, 330, 2675) 
GROUP BY category
